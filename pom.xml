<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>africa.jopen</groupId>
    <artifactId>Janus-gateway-landlord-JavaFx-app</artifactId>
    <version>0.1</version>

    <description>Janus-gateway-landlord-JavaFx-app</description>

    <properties>

        <main-class>africa.jopen.BaseApplication</main-class>

        <app.name>Janus LandLord App</app.name>
        <app.version>0.1</app.version>
        <jvm.modules>javafx.media,javafx.controls,javafx.fxml,java.logging</jvm.modules>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <javafx.version>17.0.1</javafx.version>
        <windows.upgrade.uuid>c93a8c6c-ae11-4e84-8d90-992ebf9072cb</windows.upgrade.uuid>
        <windows.vendor>Janus LandLord App</windows.vendor>
        <macos.sign></macos.sign>
        <macos.sign.identity></macos.sign.identity>

    </properties>

    <dependencies>

        <!-- This downloads the platform specific JavaFX libraries used by the project. -->
        <!-- For the final installable, the JavaFX dependencies are provided via modules, but by including these here
         they work nicely with with IDEs and other Maven plugins (e.g. the javafx:run). -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-graphics</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-media</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <dependency>
            <groupId>io.github.mkpaz</groupId>
            <artifactId>atlantafx-base</artifactId>
            <version>0.1.0-SNAPSHOT</version>
        </dependency>

    </dependencies>
    <repositories>
        <repository>
            <id>ossrh.snapshots</id>
            <name>OSSRH snapshots</name>
            <url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>
            <releases>
                <enabled>false</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>


    <build>
        <extensions>
            <extension>
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
                <version>1.7.0</version>
            </extension>
        </extensions>
        <resources>
            <resource>
                <!-- Here we are processing the platform-specific jpackage command files, adding in Maven
                 properties for configuration. -->
                <directory>${project.basedir}/src/packaging</directory>
                <filtering>true</filtering>
                <targetPath>${project.build.directory}/packaging</targetPath>
            </resource>
            <!-- Add the default resource path back in - by overriding above it disables the default -->
            <resource>
                <filtering>true</filtering>
                <directory>${project.basedir}/src/main/resources</directory>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>com.gluonhq</groupId>
                <artifactId>gluonfx-maven-plugin</artifactId>
                <version>1.0.15</version>
                <configuration>
                    <mainClass>${main-class}</mainClass>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <configuration>
                    <!-- This is an app, so we don't want to install it in the local Maven repository -->
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <!-- This copies all of the jar files declared by the Maven build into a single directory.
                        This makes it easy to assemble the final installer package -->
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <!-- The JavaFX libraries are bundled into the custom JVM, so we don't want to duplicate
                            them in the bundled app and installer. This command skips all of the JavaFX by groupId. -->
                            <excludeGroupIds>org.openjfx</excludeGroupIds>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- Put the application jar generated by the project into the dependency folder - the default folder
                for the maven-dependency-plugin output. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <outputDirectory>${project.build.directory}/dependency</outputDirectory>
                </configuration>
            </plugin>
            <plugin>
                <!-- Plugin to make working with JavaFX nicer. See https://github.com/openjfx/javafx-maven-plugin -->
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <configuration>
                    <mainClass>${main-class}</mainClass>
                </configuration>
            </plugin>
            <plugin>
                <!-- https://github.com/wiverson/jtoolprovider-plugin -->
                <groupId>io.github.wiverson</groupId>
                <artifactId>jtoolprovider-plugin</artifactId>
                <version>1.0.34</version>
                <executions>
                    <!-- This command runs jlink, generating a custom JVM by combining the JavaFX modules bundled in
                    this project with the JDK modules. -->
                    <execution>
                        <id>jlink</id>
                        <phase>package</phase>
                        <goals>
                            <goal>java-tool</goal>
                        </goals>
                        <configuration>
                            <toolName>jlink</toolName>
                            <removeDirectories>${project.build.directory}/jvm-image/</removeDirectories>
                            <modulePath>
                                ${project.basedir}/javafx-${os.detected.classifier}/javafx-jmods-${javafx.version}/
                            </modulePath>
                            <addModules>${jvm.modules}</addModules>
                            <output>${project.build.directory}/jvm-image</output>
                            <args>
                                <arg>--strip-native-commands</arg>
                                <arg>--no-header-files</arg>
                                <arg>--strip-debug</arg>
                                <arg>--no-man-pages</arg>
                                <arg>--compress=2</arg>
                            </args>
                        </configuration>
                    </execution>
                    <!-- The command that actually generates the installer. The options for each platform
                    are found the /src/packaging directory. These files are copied into the target directory by
                    the Maven resources plugin, which does the filtering to replace the original values with
                    the actual Maven properties.

                    https://github.com/wiverson/jtoolprovider-plugin/blob/main/java-tool-doc.md
                    -->
                    <execution>
                        <id>jpackage</id>
                        <phase>install</phase>
                        <goals>
                            <goal>java-tool</goal>
                        </goals>
                        <configuration>
                            <toolName>jpackage</toolName>
                            <writeOutputToLog>true</writeOutputToLog>
                            <writeErrorsToLog>true</writeErrorsToLog>
                            <failOnError>true</failOnError>
                            <removeDirectories>${project.build.directory}/installer-work</removeDirectories>
                            <args>@${project.build.directory}/packaging/${os.detected.name}-jpackage.txt</args>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>3.2.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>3.0.0-M1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.2.2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-project-info-reports-plugin</artifactId>
                    <version>3.3.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.2.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.10.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>3.0.0-M5</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
    <reporting>
        <plugins>
            <!-- http://mojo.codehaus.org/versions-maven-plugin/version-rules.html -->
            <!-- This plugin is a utility to find outdated dependencies in your project. Just run mvn site and
            the resulting HTML reports in target/site will let you know what plugins and dependencies are out of date.
             -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>2.8.1</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>dependency-updates-report</report>
                            <report>plugin-updates-report</report>
                            <report>property-updates-report</report>
                        </reports>
                    </reportSet>
                </reportSets>
                <configuration>
                    <processDependencyManagementTransitive>false</processDependencyManagementTransitive>
                </configuration>
            </plugin>
        </plugins>
    </reporting>
    <profiles>
        <profile>
            <id>github-action</id>
            <activation>
                <property>
                    <name>env.GITHUB_RUN_NUMBER</name>
                </property>
            </activation>
            <properties>
                <!--suppress UnresolvedMavenProperty -->
                <app.version>1.${env.GITHUB_RUN_NUMBER}.${env.GITHUB_RUN_ATTEMPT}</app.version>
            </properties>
        </profile>

        <!-- We use the built-in Maven profile activation system to set the platform property.
        These properties are then use to build the directory paths to the platform specific resources.
        It would be great if Maven automatically added the os family as a property by default
         -->

        <profile>
            <id>macos-sign</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <macos.sign>--mac-sign</macos.sign>
                <!-- You will have to replace this with your own dev information from your Apple identity -->
                <macos.sign.identity>--mac-signing-key-user-name "Company Name, Inc. (BXPXTXC35S)"</macos.sign.identity>
            </properties>
        </profile>

        <profile>
            <id>windows-active</id>
            <activation>
                <os>
                    <family>windows</family>
                </os>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <!-- This adds a "launch on finish" to the Windows msi installer. This just tweaks the Windows
                         installer package to run the executable after the installer runs, simplifying the user experience.
                          If you don't want this behavior, just delete this plug execution. -->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>3.0.0</version>
                        <executions>
                            <execution>
                                <phase>install</phase>
                                <id>add-launch-to-msi</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <executable>cscript</executable>
                            <outputFile>${project.build.directory}/msi-result.log</outputFile>
                            <workingDirectory>${project.build.directory}</workingDirectory>
                            <arguments>
                                <argument>${project.build.directory}/packaging/add-launch-to-msi.js</argument>
                            </arguments>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
